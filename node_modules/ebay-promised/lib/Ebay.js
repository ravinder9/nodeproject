"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

// dynamic definitions aggregated from crawling Ebay"s API docs


var _Request = require("./Request");

var _Request2 = _interopRequireDefault(_Request);

var _errors = require("./errors");

var _Immutable = require("./utils/Immutable");

var _Immutable2 = _interopRequireDefault(_Immutable);

var _endpoints = require("./definitions/endpoints");

var _endpoints2 = _interopRequireDefault(_endpoints);

var _fields = require("./definitions/fields");

var _fields2 = _interopRequireDefault(_fields);

var _globals = require("./definitions/globals");

var _globals2 = _interopRequireDefault(_globals);

var _verbs = require("./definitions/verbs");

var _verbs2 = _interopRequireDefault(_verbs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Ebay = function () {
  _createClass(Ebay, null, [{
    key: "create",

    /**
     * pure creation interface useful for iterations and other places where context may be lost
     *
     * @return     {this}  a new Ebay instance
     */
    value: function create(settings) {
      return new Ebay(settings);
    }

    /**
     * Loads credentials from `process.env`
     * 
     * @return {this}          a new Ebay instance
     * @throws {Env_Error}
     */

  }, {
    key: "fromEnv",
    value: function fromEnv() {
      return Ebay.create({
        authToken: process.env.EBAY_TOKEN || _errors.throws.Env_Error("EBAY_TOKEN"),
        cert: process.env.EBAY_CERT || _errors.throws.Env_Error("EBAY_CERT"),
        app: process.env.EBAY_APP_ID || _errors.throws.Env_Error("EBAY_APP_ID"),
        devName: process.env.EBAY_DEV_ID || _errors.throws.Env_Error("EBAY_DEV_ID"),
        sandbox: process.env.EBAY_SANDBOX || false
      });
    }

    /**
     * 
     *
     * @param      {Object}  settings the global settings
     * @return     {Ebay}
     */

  }]);

  function Ebay(settings) {
    _classCallCheck(this, Ebay);

    /**
     * global settings for all following Ebay requests
     */
    this.globals = _Immutable2.default.merge(Ebay.defaults, settings);
    /**
     * insure an error is thrown if internals are changed
     * allows for better assertions about the statefulness 
     */
    Object.freeze(this.globals);
  }

  /**
   * Deprecated in favor of `Ebay.prototype.run`
   * adds to developer ergonomics by adding a sensible error
   * 
   * @deprecated
   * @throws     {Error}
   * @return      null
   */


  _createClass(Ebay, [{
    key: "invoke",
    value: function invoke() {
      console.warn("deprecation warning :: the .invoke() method has been migrated to .run() and will be removed in the next major release");
      return this.run();
    }

    /**
     * developer ergonomic error that ensures we have at least defined the verb we want to attempt
     * 
     * @throws {Error} 
     * @return null
     */

  }, {
    key: "run",
    value: function run() {
      _errors.throws.Error("Cannot run an empty Request, please define an eBay verb or field");
    }
  }]);

  return Ebay;
}();

/**
 * defaults for eBay API
 */


exports.default = Ebay;
Ebay.defaults = {
  serviceName: "Trading",
  sandbox: false,
  site: 0,
  raw: false // return raw XML -> JSON response from Ebay
  , perPage: 100
};

/**
 * reference to the {Request} class
 */
Ebay.Request = _Request2.default;

_verbs2.default.forEach(function (verb) {
  Ebay[verb] = function () {
    return Ebay.create()[verb]();
  };

  Ebay.prototype[verb] = function () {
    return Ebay.Request.create(this)[verb]();
  };
});

Object.keys(_endpoints2.default).forEach(function (endpoint) {
  Ebay[endpoint] = function () {
    return Ebay.create()[endpoint]();
  };

  Ebay.prototype[endpoint] = function () {
    return Ebay.serviceName(endpoint);
  };
});

_fields2.default.forEach(function (field) {
  Ebay[field] = function (val) {
    return Ebay.create()[field](val);
  };

  Ebay.prototype[field] = function (val) {
    return Ebay.Request.create(this)[field](val);
  };
});

_globals2.default.forEach(function (global) {
  Ebay[global] = function (val) {
    return Ebay.create()[global](val);
  };

  Ebay.prototype[global] = function (val) {
    var cloned = _Immutable2.default.merge(this.globals, _defineProperty({}, global, val));
    return Ebay.create(cloned);
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,