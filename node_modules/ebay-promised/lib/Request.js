"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

// Definitions


var _objectToXml = require("object-to-xml");

var _objectToXml2 = _interopRequireDefault(_objectToXml);

var _bluebird = require("bluebird");

var _bluebird2 = _interopRequireDefault(_bluebird);

var _requestPromise = require("request-promise");

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _debug = require("debug");

var _debug2 = _interopRequireDefault(_debug);

var _simpleRateLimiter = require("simple-rate-limiter");

var _simpleRateLimiter2 = _interopRequireDefault(_simpleRateLimiter);

var _errors = require("./errors");

var _Parser = require("./Parser");

var _Parser2 = _interopRequireDefault(_Parser);

var _range = require("./utils/range");

var _range2 = _interopRequireDefault(_range);

var _Immutable = require("./utils/Immutable");

var _Immutable2 = _interopRequireDefault(_Immutable);

var _fields = require("./definitions/fields");

var _fields2 = _interopRequireDefault(_fields);

var _endpoints = require("./definitions/endpoints");

var _endpoints2 = _interopRequireDefault(_endpoints);

var _verbs = require("./definitions/verbs");

var _verbs2 = _interopRequireDefault(_verbs);

var _globals = require("./definitions/globals");

var _globals2 = _interopRequireDefault(_globals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SANDBOX = "sandbox";
var second = 1000;
var minute = 60 * second;
var hour = 60 * minute;
var day = 24 * hour;
var PROD = "production";
var HEADING = 'xml version="1.0" encoding="utf-8"?';
var LIST = "List";
var LISTING = "Listing";
var log = (0, _debug2.default)("ebay:request");
/**
 * Immmutable request object for making eBay API verbs
 */

var Request = function () {
  _createClass(Request, null, [{
    key: "create",


    /**
     * pure creation interface.  
     * Generally not needed as the Ebay module delegates transparently to a Request instance
     *
     * @param      {Object}   state   The state
     * @return     {Request}  the new Request object
     * @example
     * 
     *   Ebay
     *    .create(config)
     *    .GetMyeBaySelling()
     *    .run()
     *    .then(handleSuccess)
     *    .catch(errors.Ebay_Api_Error, handleValidationError)
     *    .catch(handleAllOtherErrors)
     */
    value: function create(state) {
      return new Request(state);
    }

    /**
     * creates the new Request object
     *
     * @private
     * @param      {Object}  previous  The previous state
     */

  }]);

  function Request() {
    var previous = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Request);

    /**
     * internal immutable state
     */
    this.state = _Immutable2.default.copy(previous);
    /**
     * ensures fields are detectable
     */
    this.state.fields = this.state.fields || {};
    /**
     * ensures globals are detectable
     */
    this.state.globals = this.state.globals || {};

    /**
     * generates the headers for a request
     */
    this.headers = {
      "X-EBAY-API-CALL-NAME": this.verb,
      "X-EBAY-API-COMPATIBILITY-LEVEL": "775",
      "X-EBAY-API-CERT-NAME": this.globals.cert,
      "X-EBAY-API-SITEID": this.globals.site || 0,
      "X-EBAY-API-APP-NAME": this.globals.app || "node.js::ebay-promised"
    };
    Object.freeze(this.state);
    Object.freeze(this.headers);
  }

  /**
   * returns the URL of the Request
   *
   * @private
   * @return     {String}  the url
   */


  _createClass(Request, [{
    key: "xml",


    /**
     * returns the XML document for the request
     * 
     * @private
     * @param      {Object}  options  The options
     * @return     {String}           The XML string of the Request
     */
    value: function xml() {
      var _o2x;

      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];


      var payload = this.fields;
      var listKey = this.listKey();

      if (listKey !== false) {
        payload[listKey] = _Immutable2.default.merge(payload[listKey], this.pagination(options.page));
      }

      return (0, _objectToXml2.default)((_o2x = {}, _defineProperty(_o2x, HEADING, null), _defineProperty(_o2x, this.xmlns, _Immutable2.default.merge(this.credentials, payload)), _o2x));
    }

    /**
     * convenience method for `tapping` the Request
     *
     * @param      {Function}  fn      The function to run
     */

  }, {
    key: "tap",
    value: function tap(fn) {
      fn.call(this, this);
      return this;
    }

    /**
     * determines if the Request uses a List and which key it is
     *
     * @private
     * @return     {string|false}   the key that is a List  
     */

  }, {
    key: "listKey",
    value: function listKey() {
      var fields = this.fieldKeys;
      while (fields.length) {
        var field = fields.pop();
        if (~field.indexOf(LISTING)) continue;
        if (~field.indexOf(LIST)) return field;
      }
      return false;
    }

    /**
     * generates a pagination Object
     *
     * @param      {number}  page    The page to fetch
     * @return     {Object}          The pagination representation
     */

  }, {
    key: "pagination",
    value: function pagination() {
      var page = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];

      return {
        Pagination: {
          PageNumber: page,
          EntriesPerPage: this.globals.perPage
        }
      };
    }

    /**
     * alias for `run()`
     *
     * @deprecated
     * @return     {Promise<Object>}   resolves to the response 
     */

  }, {
    key: "invoke",
    value: function invoke() {
      console.warn("deprecation warning :: the .invoke() method has been migrated to .run() and will be removed in the next major release");
      return this.run();
    }

    /**
     * runs the HTTP Post to eBay
     *
     * @private
     * @param      {Object}   options  The options
     * @return     {Promise}           resolves to the response
     *
     */

  }, {
    key: "fetch",
    value: function fetch(options) {
      var _this = this;

      return new _bluebird2.default(function (resolve, reject) {
        Request.post({
          url: _this.endpoint,
          headers: _this.headers,
          body: _this.xml(options)
          // Hotfix for OpenSSL issue
          // https://github.com/openssl/openssl/pull/852
          // https://github.com/nodejs/node/issues/3692
          , agentOptions: {
            ciphers: 'ALL',
            secureProtocol: 'TLSv1_method'
          }
        }).once("limiter-exec", function (req) {
          req = _bluebird2.default.resolve(req).tap(log);

          // resolve to raw XML
          if (_this.globals.raw) {
            return req.then(resolve).catch(reject);
          }

          return req.then(_Parser2.default.toJSON).then(function (json) {
            return _Parser2.default.unwrap(_this, json);
          }).then(_Parser2.default.clean).then(resolve).catch(reject);
        });
      });
    }

    /**
     * runs the current Request 
     *
     * @param      {<type>}  options  The options
     * @return     {<type>}  { description_of_the_return_value }
     */

  }, {
    key: "run",
    value: function run() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      if (!this.globals.authToken) _errors.throws.No_Auth_Token_Error();
      if (!this.verb) _errors.throws.No_Call_Error();

      return this.fetch(options).bind(this).then(this.schedule);
    }

    /**
     * schedules pagination requests
     * 
     * @private
     * @param      {Object}   first   The first response from the API
     * @return     {Promise}          resolves to the first resposne or the concatenated Responses
     */

  }, {
    key: "schedule",
    value: function schedule(first) {
      var _this2 = this;

      // we aren't handling pagination
      if (!first.pagination || first.pagination.pages < 2) return first;

      log("beginning pagination for [2.." + first.pagination.pages + "]");

      return _bluebird2.default.mapSeries((0, _range2.default)(2, first.pagination.pages), function (page) {
        return _this2.fetch({ page: page });
      }).then(function (results) {
        return results.reduce(function (all, result) {
          all.results = all.results.concat(result.results);
          return all;
        }, first);
      });
    }
  }, {
    key: "endpoint",
    get: function get() {
      var endpoint = _endpoints2.default[this.globals.serviceName][this.globals.sandbox ? SANDBOX : PROD];

      return endpoint ? endpoint : _errors.throws.Invalid_Endpoint(this);
    }

    /**
     * returns a copy of the internal globals
     *
     * @private
     * @return     {Object}  the globals
     */

  }, {
    key: "globals",
    get: function get() {
      return _Immutable2.default.copy(this.state.globals);
    }

    /**
     * returns an array of all the field names that have been added to the Request
     *
     * @private
     * @return     {Array<String>}  the array of names
     */

  }, {
    key: "fieldKeys",
    get: function get() {
      return Object.keys(this.fields);
    }

    /**
     * returns a copy of the Request's fields
     *
     * @private
     * @return     {Object}  the fields
     */

  }, {
    key: "fields",
    get: function get() {
      return _Immutable2.default.copy(this.state.fields);
    }

    /**
     * returns the expected name of XML node of a Request
     *
     * @private
     * @return     {String}  { description_of_the_return_value }
     */

  }, {
    key: "responseWrapper",
    get: function get() {
      return this.verb + "Response";
    }

    /**
     * returns the verb to use for this request
     *
     * @private
     * @return     {String}  the verb
     */

  }, {
    key: "verb",
    get: function get() {
      return this.state.verb;
    }

    /**
     * returns the auth token for this request
     * 
     * @private
     * @return     {String}  eBay Auth token
     */

  }, {
    key: "token",
    get: function get() {
      return this.globals.authToken;
    }

    /**
     * returns the XML structure for the SOAP auth
     * 
     * @private
     * @return     {Object}  the SOAP
     */

  }, {
    key: "credentials",
    get: function get() {
      return { RequesterCredentials: { eBayAuthToken: this.token } };
    }

    /**
     * returns the XML namespace
     * 
     * @private
     * @return     {String}  the XML namespace from the verb
     */

  }, {
    key: "xmlns",
    get: function get() {
      return this.verb + "Request xmlns=\"urn:ebay:apis:eBLBaseComponents\"";
    }
  }]);

  return Request;
}();

/**
 * 
 * Ebay ratelimits to 5000 verbs per day per default
 * 
 * source: https://go.developer.ebay.com/api-verb-limits
 * 
 * this can be reconfigured on load if you are using 
 * an approved compatible Application
 * 
 * @example
 *   Request.post.to(1.5million).per(DAY)
 * 
 */

exports.default = Request;
Request.RATELIMIT = {
  factor: 5000 / day * second // req/sec
};

Request.post = (0, _simpleRateLimiter2.default)(function EbayRequestSingleton() {
  return _requestPromise2.default.post.apply(_requestPromise2.default, arguments);
}).to(Math.floor(Request.RATELIMIT.factor * minute)).per(minute);

_verbs2.default.forEach(function (verb) {
  // cache
  var $verb = { verb: verb };

  Request.prototype[verb] = function requestCallSetter() {
    var cloned = _Immutable2.default.merge(this.state, $verb);
    return Request.create(cloned);
  };
});

_fields2.default.forEach(function (field) {
  Request.prototype[field] = function requestFieldSetter(val) {
    var cloned = _Immutable2.default.copy(this.state);
    cloned.fields[field] = val;
    return Request.create(cloned);
  };
});

Object.keys(_endpoints2.default).concat(_globals2.default).forEach(function (global) {
  Request.prototype[global] = function requestGlobalSetter(val) {
    _errors.throws.Setting_Error(global);
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,